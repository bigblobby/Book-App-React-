{"version":3,"sources":["components/BookForm.js","components/BookList.js","components/App.js","index.js"],"names":["BookForm","titleRef","React","createRef","authorRef","isbnRef","handleSubmit","e","preventDefault","_this","current","value","book","title","author","isbn","parseInt","props","addBook","currentTarget","reset","showAlert","react_default","a","createElement","id","className","onSubmit","this","htmlFor","type","ref","Component","BookList","renderBook","key","onClick","removeBook","_this2","scope","books","map","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toConsumableArray","state","push","setState","bookisbn","forEach","index","splice","message","alertMessage","concat","setTimeout","localStorageBooks","localStorage","getItem","JSON","parse","setItem","stringify","components_BookForm","length","components_BookList","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.d170bbb3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass BookForm extends React.Component {\r\n  titleRef = React.createRef();\r\n  authorRef = React.createRef();\r\n  isbnRef = React.createRef();\r\n\r\n  handleSubmit = e => {\r\n    // Prevent page refesh\r\n    e.preventDefault();\r\n\r\n    // Check if all fields have been filled in\r\n    if (\r\n      this.titleRef.current.value === \"\" ||\r\n      this.authorRef.current.value === \"\" ||\r\n      this.isbnRef.current.value === \"\"\r\n    ) {\r\n      this.props.showAlert(\"Please fill out all fields\", \"danger\");\r\n      return;\r\n    }\r\n    // Create new book\r\n    const book = {\r\n      title: this.titleRef.current.value,\r\n      author: this.authorRef.current.value,\r\n      isbn: parseInt(this.isbnRef.current.value)\r\n    };\r\n\r\n    // Add book to App's state\r\n    this.props.addBook(book);\r\n\r\n    // Show add book alert\r\n    // this.props.showAlert(\"Book Added!\", \"success\");\r\n\r\n    // Reset the form\r\n    e.currentTarget.reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"book-form\" className=\"mb-5\" onSubmit={this.handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"title\">Title:</label>\r\n          <input\r\n            id=\"title\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            ref={this.titleRef}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"author\">Author:</label>\r\n          <input\r\n            id=\"author\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            ref={this.authorRef}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"isbn\">ISBN:</label>\r\n          <input\r\n            id=\"isbn\"\r\n            className=\"form-control\"\r\n            type=\"number\"\r\n            ref={this.isbnRef}\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-primary\" type=\"submit\">\r\n          Add Book <i className=\"fas fa-plus ml-2\" />\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookForm;\r\n","import React from \"react\";\r\n\r\nclass BookList extends React.Component {\r\n  renderBook = book => {\r\n    return (\r\n      <tr key={book.isbn}>\r\n        <td>{book.title}</td>\r\n        <td>{book.author}</td>\r\n        <td>{book.isbn}</td>\r\n        <td>\r\n          <button\r\n            className=\"btn btn-danger delete-button\"\r\n            onClick={() => this.props.removeBook(book.isbn)}\r\n          >\r\n            X\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <table id=\"book-table\" className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Title</th>\r\n            <th scope=\"col\">Author</th>\r\n            <th scope=\"col\">ISBN</th>\r\n            <th scope=\"col\" />\r\n          </tr>\r\n        </thead>\r\n        <tbody>{this.props.books.map(book => this.renderBook(book))}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookList;\r\n","import React from \"react\";\r\nimport BookForm from \"./BookForm\";\r\nimport BookList from \"./BookList\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // Set initial state\r\n    this.state = {\r\n      books: [],\r\n      alertMessage: null\r\n    };\r\n  }\r\n\r\n  // This function fires on component mount (page load in this case)\r\n  componentDidMount() {\r\n    // 1. Check if there are any books in localstorage\r\n    const localStorageBooks = localStorage.getItem(\"books\");\r\n    // 2. If so, set the books on state\r\n    if (localStorageBooks) {\r\n      this.setState({ books: JSON.parse(localStorageBooks) });\r\n    }\r\n  }\r\n\r\n  // This function fires when the state/component is updated\r\n  componentDidUpdate() {\r\n    localStorage.setItem(\"books\", JSON.stringify(this.state.books));\r\n  }\r\n\r\n  addBook = book => {\r\n    // 1. Get a copy of books in state\r\n    const books = [...this.state.books];\r\n    // 2. Add the new book\r\n    books.push(book);\r\n    // 3. Set the new state with the new book added\r\n    this.setState({ books });\r\n    // 4. Show alert when book is added\r\n    this.showAlert(\"Book Added!\", \"success\");\r\n  };\r\n\r\n  removeBook = bookisbn => {\r\n    // 1. Get a copy of books in state\r\n    const books = [...this.state.books];\r\n    // 2. Loop over the books and find the correct one to delete\r\n    books.forEach((book, index) => {\r\n      if (bookisbn === book.isbn) {\r\n        books.splice(index, 1);\r\n      }\r\n    });\r\n    // 3. Update the state because we removed a book\r\n    this.setState({ books });\r\n    // 4. Show alert when book is removed\r\n    this.showAlert(\"Book Removed!\", \"danger\");\r\n  };\r\n\r\n  showAlert = (message, type) => {\r\n    // If showAlert has been called do this\r\n    if (message) {\r\n      this.setState({\r\n        alertMessage: <div className={`alert alert-${type}`}>{message}</div>\r\n      });\r\n      // Remove the alert notification after 3 seconds and update state\r\n      setTimeout(() => {\r\n        this.setState({ alertMessage: null });\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"header\">\r\n          <h1>Book List</h1>\r\n          {this.state.alertMessage}\r\n        </header>\r\n        <BookForm addBook={this.addBook} showAlert={this.showAlert} />\r\n        {/* ONLY DISPLAY TABLE IF THERE ARE BOOKS */}\r\n        {this.state.books.length > 0 && (\r\n          <BookList books={this.state.books} removeBook={this.removeBook} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}